{"version":3,"file":"static/js/746.e26acf9c.chunk.js","mappings":"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","sources":["components/ListMovie/ListMovie.jsx","components/const/const.js","components/services/fetchFilmApi.js","components/SearchBar/SearchBar.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const ListMovie = ({ movies, path }) => {\n  const location = useLocation();\n  const addPath = path ? `${path}/` : '';\n\n  return (\n    <ul>\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <Link to={`${addPath}${id}`} state={{ from: location }}>\n            {title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nListMovie.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  path: PropTypes.string,\n};\n","export const KEY = '669f3cb1f35b3303e76bb3fe15475760';\nexport const API = 'https://api.themoviedb.org/3';\nexport const MOVIE = { TRENDING: 'trending', SEARCH: 'search' };\nexport const IMG = 'https://image.tmdb.org/t/p/w500';\n","import axios from 'axios';\nimport { API, KEY, MOVIE } from '../const/const';\nimport { toast } from 'react-toastify';\n\nexport const fetchFilmApi = async (params, search) => {\n  const URL =\n    params === MOVIE.TRENDING\n      ? `${API}/trending/movie/day?api_key=${KEY}`\n      : `${API}/search/movie?api_key=${KEY}&query=${search}`;\n\n  try {\n    const resolve = await axios.get(URL);\n\n    if (resolve.status !== 200) {\n      throw new Error('The service is unavailable.');\n    }\n\n    return resolve.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const fetchFilmById = async id => {\n  const URL = `${API}/movie/${id}?api_key=${KEY}`;\n\n  try {\n    const resolve = await axios.get(URL);\n    if (resolve.status !== 200) {\n      throw new Error('The service is unavailable.');\n    }\n    return resolve.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const fetchFilmByCast = async id => {\n  const URL = `${API}/movie/${id}/credits?api_key=${KEY}`;\n\n  try {\n    const resolve = await axios.get(URL);\n    if (resolve.status !== 200) {\n      throw new Error('The service is unavailable.');\n    }\n\n    return resolve.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const fetchFilmByReviews = async id => {\n  const URL = `${API}/movie/${id}/reviews?api_key=${KEY}`;\n\n  try {\n    const resolve = await axios.get(URL);\n    if (resolve.status !== 200) {\n      throw new Error('The service is unavailable.');\n    }\n\n    return resolve.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const SearchBar = ({ onSubmit }) => {\n  const [search, setSearch] = useState('');\n\n  const handleInputChange = evt => {\n    const query = evt.target.value;\n    setSearch(query);\n  };\n\n  const handleFormSubmit = evt => {\n    evt?.preventDefault();\n    const { value } = evt?.target.elements.search;\n    const query = value || '';\n\n    onSubmit({ query });\n    setSearch('');\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <input\n        type=\"text\"\n        name=\"search\"\n        autoComplete=\"off\"\n        autoFocus\n        title=\"field for entering search query\"\n        required\n        value={search}\n        onChange={handleInputChange}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { toast } from 'react-toastify';\n\nimport { fetchFilmApi } from 'components/services/fetchFilmApi';\nimport { MOVIE } from 'components/const/const';\nimport { SearchBar } from '../../components/SearchBar/SearchBar';\nimport { ListMovie } from '../../components/ListMovie/ListMovie';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query') ?? '';\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n\n    fetchFilmApi(MOVIE.SEARCH, searchQuery).then(({ results }) => {\n      const newMovieList = [\n        ...results.map(({ id, title }) => ({ id, title } ?? [])),\n      ];\n\n      if (newMovieList.length === 0) {\n        return toast.error(`No movie for search query ${searchQuery}.`);\n      }\n\n      setMovies(newMovieList);\n    });\n  }, [searchQuery]);\n\n  return (\n    <>\n      <SearchBar onSubmit={setSearchParams} />\n      <ListMovie movies={movies} path={''} />\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["ListMovie","movies","path","location","useLocation","addPath","map","id","title","to","state","from","KEY","API","MOVIE","TRENDING","SEARCH","IMG","fetchFilmApi","params","search","URL","axios","resolve","status","Error","data","toast","message","fetchFilmById","fetchFilmByCast","fetchFilmByReviews","SearchBar","onSubmit","useState","setSearch","evt","preventDefault","value","target","elements","query","type","name","autoComplete","autoFocus","required","onChange","useSearchParams","searchParams","setSearchParams","searchQuery","get","setMovies","useEffect","then","results","newMovieList","length"],"sourceRoot":""}