{"version":3,"file":"static/js/993.e616e0ee.chunk.js","mappings":"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","sources":["components/const/const.js","components/services/fetchFilmApi.js","pages/GetMoviesDetails/GetMoviesDetails.styled.js","pages/GetMoviesDetails/GetMoviesDetails.jsx"],"sourcesContent":["export const KEY = '669f3cb1f35b3303e76bb3fe15475760';\nexport const API = 'https://api.themoviedb.org/3';\nexport const MOVIE = { TRENDING: 'trending', SEARCH: 'search' };\nexport const IMG = 'https://image.tmdb.org/t/p/w500';\n","import axios from 'axios';\nimport { API, KEY, MOVIE } from '../const/const';\nimport { toast } from 'react-toastify';\n\nexport const fetchFilmApi = async (params, search) => {\n  const URL =\n    params === MOVIE.TRENDING\n      ? `${API}/trending/movie/day?api_key=${KEY}`\n      : `${API}/search/movie?api_key=${KEY}&query=${search}`;\n\n  try {\n    const resolve = await axios.get(URL);\n\n    if (resolve.status !== 200) {\n      throw new Error('The service is unavailable.');\n    }\n\n    return resolve.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const fetchFilmById = async id => {\n  const URL = `${API}/movie/${id}?api_key=${KEY}`;\n\n  try {\n    const resolve = await axios.get(URL);\n    if (resolve.status !== 200) {\n      throw new Error('The service is unavailable.');\n    }\n    return resolve.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const fetchFilmByCast = async id => {\n  const URL = `${API}/movie/${id}/credits?api_key=${KEY}`;\n\n  try {\n    const resolve = await axios.get(URL);\n    if (resolve.status !== 200) {\n      throw new Error('The service is unavailable.');\n    }\n\n    return resolve.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const fetchFilmByReviews = async id => {\n  const URL = `${API}/movie/${id}/reviews?api_key=${KEY}`;\n\n  try {\n    const resolve = await axios.get(URL);\n    if (resolve.status !== 200) {\n      throw new Error('The service is unavailable.');\n    }\n\n    return resolve.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const LinkStyled = styled(Link)`\n  display: inline-block;\n  text-decoration: none;\n  outline: none;\n  font-size: 12px;\n  padding: 2px;\n  margin-bottom: 10px;\n  border: 1px solid black;\n  border-radius: 4px;\n  background-color: #faf0f1;\n  color: black;\n  :hover {\n    background-color: #999999;\n  }\n`;\n\nexport const Wraper = styled.div`\n  display: flex;\n`;\n\nexport const Inner = styled.div`\n  border-top: 2px solid black;\n  border-bottom: 2px solid black;\n  margin-bottom: 10px;\n`;\n\nexport const ImgWraper = styled.div`\n  margin-right: 10px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams, useLocation, Outlet, Link } from 'react-router-dom';\n\nimport { fetchFilmById } from '../../components/services/fetchFilmApi';\nimport { IMG } from '../../components/const/const';\nimport noImage from '../../components/const/noImage.jpg';\nimport {\n  Wraper,\n  ImgWraper,\n  Inner,\n  LinkStyled,\n} from './GetMoviesDetails.styled';\n\nconst GetMoviesDetails = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const [option, setOption] = useState({});\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    fetchFilmById(movieId)\n      .then(\n        ({\n          title,\n          release_date,\n          vote_average,\n          overview,\n          genres,\n          tagline,\n          poster_path,\n        }) => {\n          const year = release_date.substring(0, 4);\n          const score = Math.round(vote_average * 10) + '%';\n          const genre = genres.map(genre => genre['name']).join(' ');\n          const imgURL = poster_path ? IMG + poster_path : noImage;\n\n          return setOption({\n            title,\n            year,\n            score,\n            overview,\n            genre,\n            tagline,\n            imgURL,\n          });\n        }\n      )\n      .catch(error => error.message);\n  }, [movieId]);\n\n  const { title, year, score, overview, genre, tagline, imgURL } = option;\n\n  return (\n    <>\n      <LinkStyled to={location.state.from}>&#x261A; Go back</LinkStyled>\n      <Wraper>\n        <ImgWraper>\n          <img src={imgURL} alt={tagline} width={300} />\n        </ImgWraper>\n        <div>\n          <h1>\n            {title} ({year})\n          </h1>\n          <p>User score: {score}</p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h2>Genres</h2>\n          <p>{genre}</p>\n        </div>\n      </Wraper>\n\n      <Inner>\n        <h2>Additional information</h2>\n        <ul>\n          <li>\n            <Link to=\"cast\" state={{ from: location.state?.from }}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to=\"reviews\" state={{ from: location.state?.from }}>\n              Reviews\n            </Link>\n          </li>\n        </ul>\n      </Inner>\n      <Outlet />\n    </>\n  );\n};\n\nexport default GetMoviesDetails;\n"],"names":["KEY","API","MOVIE","TRENDING","SEARCH","IMG","fetchFilmApi","params","search","URL","axios","resolve","status","Error","data","toast","message","fetchFilmById","id","fetchFilmByCast","fetchFilmByReviews","LinkStyled","styled","Link","Wraper","Inner","ImgWraper","movieId","useParams","location","useLocation","useState","option","setOption","useEffect","then","title","release_date","vote_average","overview","genres","tagline","poster_path","year","substring","score","Math","round","genre","map","join","imgURL","noImage","catch","error","to","state","from","src","alt","width"],"sourceRoot":""}