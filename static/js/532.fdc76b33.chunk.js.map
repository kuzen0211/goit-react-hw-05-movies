{"version":3,"file":"static/js/532.fdc76b33.chunk.js","mappings":"gPAAO,IAAMA,EAAM,mCACNC,EAAM,+BACNC,EAAQ,CAAEC,SAAU,WAAYC,OAAQ,UACxCC,EAAM,iC,+LCCNC,EAAY,mCAAG,WAAOC,EAAQC,GAAf,gFACpBC,EACJF,IAAWL,EAAAA,GAAAA,SAAX,UACOD,EAAAA,GADP,uCACyCD,EAAAA,IADzC,UAEOC,EAAAA,GAFP,iCAEmCD,EAAAA,GAFnC,kBAEgDQ,GAJxB,kBAOFE,EAAAA,EAAAA,IAAUD,GAPR,UASD,OAFjBE,EAPkB,QASZC,OATY,sBAUhB,IAAIC,MAAM,+BAVM,gCAajBF,EAAQG,MAbS,kCAexBC,EAAAA,GAAAA,MAAY,KAAMC,SAfM,0DAAH,wDAmBZC,EAAa,mCAAG,WAAMC,GAAN,gFACrBT,EADqB,UACZR,EAAAA,GADY,kBACCiB,EADD,oBACelB,EAAAA,IADf,kBAIHU,EAAAA,EAAAA,IAAUD,GAJP,UAKF,OADjBE,EAJmB,QAKbC,OALa,sBAMjB,IAAIC,MAAM,+BANO,gCAQlBF,EAAQG,MARU,kCAUzBC,EAAAA,GAAAA,MAAY,KAAMC,SAVO,0DAAH,sDAcbG,EAAe,mCAAG,WAAMD,GAAN,gFACvBT,EADuB,UACdR,EAAAA,GADc,kBACDiB,EADC,4BACqBlB,EAAAA,IADrB,kBAILU,EAAAA,EAAAA,IAAUD,GAJL,UAKJ,OADjBE,EAJqB,QAKfC,OALe,sBAMnB,IAAIC,MAAM,+BANS,gCASpBF,EAAQG,MATY,kCAW3BC,EAAAA,GAAAA,MAAY,KAAMC,SAXS,0DAAH,sDAefI,EAAkB,mCAAG,WAAMF,GAAN,gFAC1BT,EAD0B,UACjBR,EAAAA,GADiB,kBACJiB,EADI,4BACkBlB,EAAAA,IADlB,kBAIRU,EAAAA,EAAAA,IAAUD,GAJF,UAKP,OADjBE,EAJwB,QAKlBC,OALkB,sBAMtB,IAAIC,MAAM,+BANY,gCASvBF,EAAQG,MATe,kCAW9BC,EAAAA,GAAAA,MAAY,KAAMC,SAXY,0DAAH,qD,kFCb/B,UAlCgB,WACd,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACHL,IAILD,EAAAA,EAAAA,IAAmBC,GAChBM,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACPH,EACEG,EAAQC,KAAI,kBAA8B,CAAEC,OAAhC,EAAGA,OAAqCC,QAAxC,EAAWA,QAAsCb,GAAjD,EAAoBA,GAApB,IAEf,IACAc,OAAM,SAAAC,GAAK,OAAIA,EAAMjB,OAAV,GACf,GAAE,CAACK,KAGF,+BACE,wBACGG,EAAOU,OACJV,EAAOK,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASb,EAApB,EAAoBA,GAApB,OACT,2BACE,oCAAYY,MACZ,uBAAIC,MAFGb,EADA,IAMX,+CAIX,C","sources":["components/const/const.js","components/services/fetchFilmApi.js","pages/GetMoviesDetails/Reviews/Reviews.jsx"],"sourcesContent":["export const KEY = '669f3cb1f35b3303e76bb3fe15475760';\nexport const API = 'https://api.themoviedb.org/3';\nexport const MOVIE = { TRENDING: 'trending', SEARCH: 'search' };\nexport const IMG = 'https://image.tmdb.org/t/p/w500';\n","import axios from 'axios';\nimport { API, KEY, MOVIE } from '../const/const';\nimport { toast } from 'react-toastify';\n\nexport const fetchFilmApi = async (params, search) => {\n  const URL =\n    params === MOVIE.TRENDING\n      ? `${API}/trending/movie/day?api_key=${KEY}`\n      : `${API}/search/movie?api_key=${KEY}&query=${search}`;\n\n  try {\n    const resolve = await axios.get(URL);\n\n    if (resolve.status !== 200) {\n      throw new Error('The service is unavailable.');\n    }\n\n    return resolve.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const fetchFilmById = async id => {\n  const URL = `${API}/movie/${id}?api_key=${KEY}`;\n\n  try {\n    const resolve = await axios.get(URL);\n    if (resolve.status !== 200) {\n      throw new Error('The service is unavailable.');\n    }\n    return resolve.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const fetchFilmByCast = async id => {\n  const URL = `${API}/movie/${id}/credits?api_key=${KEY}`;\n\n  try {\n    const resolve = await axios.get(URL);\n    if (resolve.status !== 200) {\n      throw new Error('The service is unavailable.');\n    }\n\n    return resolve.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const fetchFilmByReviews = async id => {\n  const URL = `${API}/movie/${id}/reviews?api_key=${KEY}`;\n\n  try {\n    const resolve = await axios.get(URL);\n    if (resolve.status !== 200) {\n      throw new Error('The service is unavailable.');\n    }\n\n    return resolve.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchFilmByReviews } from '../../../components/services/fetchFilmApi';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [option, setOption] = useState([]);\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    fetchFilmByReviews(movieId)\n      .then(({ results }) => {\n        setOption(\n          results.map(({ author, content, id }) => ({ author, content, id }))\n        );\n      })\n      .catch(error => error.message);\n  }, [movieId]);\n\n  return (\n    <>\n      <ul>\n        {option.length\n          ? option.map(({ author, content, id }) => (\n              <li key={id}>\n                <p>Author: {author}</p>\n                <p>{content}</p>\n              </li>\n            ))\n          : \"We don't have any reviews for this movie.\"}\n      </ul>\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["KEY","API","MOVIE","TRENDING","SEARCH","IMG","fetchFilmApi","params","search","URL","axios","resolve","status","Error","data","toast","message","fetchFilmById","id","fetchFilmByCast","fetchFilmByReviews","movieId","useParams","useState","option","setOption","useEffect","then","results","map","author","content","catch","error","length"],"sourceRoot":""}